/*!

Message protocol

A message sent via the network is composed of protocol headers and a payload.
An arbitrary amount of headers can be chained together to form one message.
In order to segment the message processing chain into individual loosely
coupled blocks, a header should be self-contained. This means it can be used
in isolation without having access to data stored in other headers.

\code
+----------+----------+-----+----------+---------+
| Header 1 | Header 2 | ... | Header n | Payload |
+----------+----------+-----+----------+---------+
\endcode

If a protocol also requires a footer, the payload is bracketed by the header
and the footer.

\code
+----------+----------+-----+----------+---------+----------+-----+----------+----------+
| Header 1 | Header 2 | ... | Header n | Payload | Footer n | ... | Footer 2 | Footer 1 |
+----------+----------+-----+----------+---------+----------+-----+----------+----------+
\endcode

A typical approach is to segment the headers and footers according to the
ISO-OSI layer model. A famous example is TCP/IP over ethernet, where a TCP
packet is wrapped in an IP packet which is again wrapped in an ethernet MAC
frame.

Buffer

A buffer is the central data storage unit used in the message processing
chain. The design of a buffer has to meet the following requirements:
- A buffer must have suitable alignment to store any data type. This ensures
  that a buffer can be used in the same manner as dynamically allocated
  memory without worries.
- It must be possible to store the buffer in a queue. Message processors
  (e.g. network interfaces) can then keep a list of pending buffers and do not
  block other processors or the application.
- It must be possible to prepend and append data. This is a central requirement
  to minimize copying. The application can simply write its data into a buffer
  and pass it on to the message processing chain. Every member in this chain
  can prepend a header and append a footer without creating copies of the
  payload. The last element in the chain (most likely the network interface)
  is in charge for disposing the buffer when it is not needed any longer.
- In certain situations it is necessary that an application retransmits a block
  of data on demand. A possible implementation is that the application keeps a
  copy of a buffer until it receives an acknowledge from the other end.
  These copies can often be avoided when it is possible to reclaim a buffer
  before it is disposed. --> BufferMemento


BufferMemento

BufferMementos are used to save the state of a buffer. This is needed whenever
a high-level buffer processor needs to retrieve a buffer after it has been
processed by low-level processors. As an example, an application might want
to keep a buffer until it has been acknowledged by the receiver such that
the buffer can be retransmitted upon request. The application can add a
BufferMemento to a buffer and will get the buffer back after it has been
sent by the interface. The memento stores the state of the iterators but not
the data in between. This is sufficient as long as subsequent elements in
the processing chain restrict themselves to prepending and appending data
but do not modify the data elements between the iterators.


Neighbor discovery

The neighbor discovery process serves two purposes: 1.) determining the
link-layer address of a neighbor and 2.) verifying its reachability.
Neighbor discovery relies on two messages: the Neighbor Solicitation and the
Neighbor Advertisment. A Neighbor Solicitation is sent by a device which wants
to discover a neighbor. A Neighbor Advertisment is sent by a device either in
response to a Neighbor Solicitation or spontaneously to make itself known to
other devices on the same link.

If a neighbor discovery is in progress, all further messages are delayed until
the reachability of the neighbor could be verified. So even if two processes
simultaneously start to transmit to the same neighbor, the Neighbor Solicitation
is sent only once.


Neighbor discovery states

- Incomplete: The neighbor structure has just been created and the discovery
  procedure is in progress. The link-layer address of the neighbor is not
  yet known.

- Reachable: The reachability of the neighbor has been verified recently. A
  new transfer just sends the messages to the neighbor without the necessity
  to verify the reachability again.

- Stale: The reachability of the neighbor is questionable because no transfer
  has happened recently.

- Probe: The neighbor discovery is in progress. All messages sent to this
  neighbor are delayed until the neighbor is known to be reachable again.


Destination cache, neighbor cache and routing table

The neighbor cache stores data about each neighbor to which a message has been
sent. This includes information such as the network address and the link-layer
address as well as the state of the neighbor discovery, for example.

*/
